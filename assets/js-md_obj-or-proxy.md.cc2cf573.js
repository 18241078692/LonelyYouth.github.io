import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d53bf09d.js";const d=JSON.parse('{"title":"记录一下 Object.defineProperty 与 Proxy 的区别","description":"Object.defineProperty 与 Proxy 的区别","frontmatter":{"description":"Object.defineProperty 与 Proxy 的区别","layout":"doc","tag":["js"],"prev":{"text":"javascript目录","link":"/js-md/"},"next":{"text":"还没想好","link":"/bug-md/"}},"headers":[],"relativePath":"js-md/obj-or-proxy.md","filePath":"js-md/obj-or-proxy.md","lastUpdated":null}'),p={name:"js-md/obj-or-proxy.md"},o=l(`<h1 id="记录一下-object-defineproperty-与-proxy-的区别" tabindex="-1">记录一下 Object.defineProperty 与 Proxy 的区别 <a class="header-anchor" href="#记录一下-object-defineproperty-与-proxy-的区别" aria-label="Permalink to &quot;记录一下 Object.defineProperty 与 Proxy 的区别&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>大家好，我是你们的友好邻居 Talon ，昨天刷短视频偶然看到，直播老师问了一个同学 <code>Object.defineProperty</code> 与 <code>Proxy</code> 的区别，以及 <code>Object.defineProperty</code> 为什么不能监听数组长度的变化，今天我们就来记录一下。</p><h2 id="一、object-defineproperty" tabindex="-1">一、Object.defineProperty <a class="header-anchor" href="#一、object-defineproperty" aria-label="Permalink to &quot;一、Object.defineProperty&quot;">​</a></h2><ul><li><strong>用途：用于直接在对象上定义一个新属性或修改现有属性的特性，对目标对象进行数据劫持。</strong></li><li><strong>影响范围： 作用于单个属性。</strong></li><li><strong>兼容性： 支持的浏览器版本较旧，较早引入到 JavaScript 中。</strong></li></ul><h3 id="举个栗子" tabindex="-1">举个栗子 <a class="header-anchor" href="#举个栗子" aria-label="Permalink to &quot;举个栗子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> person </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(person, </span><span style="color:#9ECBFF;">&#39;age&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    writable: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 当前属性是否可写 默认 false</span></span>
<span class="line"><span style="color:#E1E4E8;">    enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否可以通过 for-in 循环返回 默认 true</span></span>
<span class="line"><span style="color:#E1E4E8;">    configurable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否可以通过 delete 删除并重新定义 默认 true</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(person.age) </span><span style="color:#6A737D;">// 输出 18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(person, </span><span style="color:#032F62;">&#39;age&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    value: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    writable: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 当前属性是否可写 默认 false</span></span>
<span class="line"><span style="color:#24292E;">    enumerable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否可以通过 for-in 循环返回 默认 true</span></span>
<span class="line"><span style="color:#24292E;">    configurable: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否可以通过 delete 删除并重新定义 默认 true</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person.age) </span><span style="color:#6A737D;">// 输出 18</span></span></code></pre></div><h3 id="set-函数和-get-函数" tabindex="-1">set() 函数和 get() 函数 <a class="header-anchor" href="#set-函数和-get-函数" aria-label="Permalink to &quot;set() 函数和 get() 函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> book </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    year_: </span><span style="color:#79B8FF;">2017</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// year_中的下划线常用来表示该属性，并不希望在对象方法的外部被访问</span></span>
<span class="line"><span style="color:#E1E4E8;">    edition: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(book, </span><span style="color:#9ECBFF;">&#39;year&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取函数，在读取属性时调用。默认值为 undefined。</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.year_</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 设置函数，在写入属性时调用。默认值为 undefined。</span></span>
<span class="line"><span style="color:#6A737D;">     * 当 year 属性被改变时调用，即 newValue 等于你设置的值。</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">newValue</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newValue </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2017</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.year_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.edition </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> newValue </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.year_</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">book.year </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2018</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(book.edition) </span><span style="color:#6A737D;">// 输出 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    year_: </span><span style="color:#005CC5;">2017</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// year_中的下划线常用来表示该属性，并不希望在对象方法的外部被访问</span></span>
<span class="line"><span style="color:#24292E;">    edition: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(book, </span><span style="color:#032F62;">&#39;year&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取函数，在读取属性时调用。默认值为 undefined。</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.year_</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 设置函数，在写入属性时调用。默认值为 undefined。</span></span>
<span class="line"><span style="color:#6A737D;">     * 当 year 属性被改变时调用，即 newValue 等于你设置的值。</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">newValue</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">newValue</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newValue </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2017</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.year_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newValue</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.edition </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> newValue </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.year_</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">book.year </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2018</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(book.edition) </span><span style="color:#6A737D;">// 输出 2</span></span></code></pre></div><h3 id="object-defineproperty-为什么不能监听数组长度的变化" tabindex="-1">Object.defineProperty 为什么不能监听数组长度的变化？ <a class="header-anchor" href="#object-defineproperty-为什么不能监听数组长度的变化" aria-label="Permalink to &quot;Object.defineProperty 为什么不能监听数组长度的变化？&quot;">​</a></h3><p>因为数组的一些操作，比如直接通过索引修改元素或使用数组的 push、pop、splice 等方法，会绕过 Object.defineProperty 的 setter 函数，对于重新赋值length的数组，不会新增索引，因为不清楚新增的索引数量，所以监听不到。 <a href="https://burning-shadow.github.io/2019/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88Object.defineProperty%E4%B8%8D%E8%83%BD%E6%A3%80%E6%B5%8B%E5%88%B0%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E7%9A%84%E5%8F%98%E5%8C%96/"><i>为什么Object.defineProperty不能检测到数组长度的变化</i></a></p><h2 id="二、proxy" tabindex="-1">二、Proxy <a class="header-anchor" href="#二、proxy" aria-label="Permalink to &quot;二、Proxy&quot;">​</a></h2><ul><li><strong>用途： 提供一种创建代理对象，以便自定义目标对象的行为的机制。可以拦截目标对象上的多个操作。</strong></li><li><strong>影响范围： 能够拦截对象的多个操作，包括读取、写入、删除等。</strong></li><li><strong>兼容性： 较新的特性，需要较新版本的 JavaScript 引擎支持。</strong></li></ul><h3 id="举个栗子-1" tabindex="-1">举个栗子 <a class="header-anchor" href="#举个栗子-1" aria-label="Permalink to &quot;举个栗子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * get 函数是一个捕获器，可以理解为一个基本操作的拦截器，当读取代理对象的属性时会触发此操作</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">target</span><span style="color:#6A737D;"> 被代理的对象即目标对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">prop</span><span style="color:#6A737D;"> 目标对象的属性</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">receiver</span><span style="color:#6A737D;"> 代理对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{any}</span><span style="color:#6A737D;"> 返回 将要被读取属性的属性值</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`读取属性：\${</span><span style="color:#E1E4E8;">prop</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> target[prop]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * set 函数是一个捕获器，可以理解为一个基本操作的拦截器，当设置代理对象的属性时会触发此操作</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">target</span><span style="color:#6A737D;"> 被代理的对象即目标对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">prop</span><span style="color:#6A737D;"> 目标对象的属性</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">value</span><span style="color:#6A737D;"> 要赋给属性的值</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">receiver</span><span style="color:#6A737D;"> 接收最初赋值的对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> 返回 true 表示成功；返回 false 表示失败，严格模式下会抛出 TypeError。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">receiver</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`设置属性 \${</span><span style="color:#E1E4E8;">prop</span><span style="color:#9ECBFF;">} 值为 \${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, receiver);</span></span>
<span class="line"><span style="color:#E1E4E8;">        target[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">({}, handler)</span></span>
<span class="line"><span style="color:#E1E4E8;">proxy.num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 触发 set操作 设置属性</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(proxy.num); </span><span style="color:#6A737D;">// 触发 get操作 读取属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * get 函数是一个捕获器，可以理解为一个基本操作的拦截器，当读取代理对象的属性时会触发此操作</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">target</span><span style="color:#6A737D;"> 被代理的对象即目标对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">prop</span><span style="color:#6A737D;"> 目标对象的属性</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">receiver</span><span style="color:#6A737D;"> 代理对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{any}</span><span style="color:#6A737D;"> 返回 将要被读取属性的属性值</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prop</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`读取属性：\${</span><span style="color:#24292E;">prop</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, receiver);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> target[prop]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * set 函数是一个捕获器，可以理解为一个基本操作的拦截器，当设置代理对象的属性时会触发此操作</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">target</span><span style="color:#6A737D;"> 被代理的对象即目标对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">prop</span><span style="color:#6A737D;"> 目标对象的属性</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">value</span><span style="color:#6A737D;"> 要赋给属性的值</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">receiver</span><span style="color:#6A737D;"> 接收最初赋值的对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{boolean}</span><span style="color:#6A737D;"> 返回 true 表示成功；返回 false 表示失败，严格模式下会抛出 TypeError。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">prop</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">receiver</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`设置属性 \${</span><span style="color:#24292E;">prop</span><span style="color:#032F62;">} 值为 \${</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, receiver);</span></span>
<span class="line"><span style="color:#24292E;">        target[prop] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proxy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">({}, handler)</span></span>
<span class="line"><span style="color:#24292E;">proxy.num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 触发 set操作 设置属性</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(proxy.num); </span><span style="color:#6A737D;">// 触发 get操作 读取属性</span></span></code></pre></div><h2 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h2><ul><li><strong>Object.defineProperty 用于操作单个属性，而 Proxy 可以拦截更多的操作，并作用于整个对象。</strong></li><li><strong>Proxy 提供了更灵活和强大的拦截机制，可以拦截目标对象上的多种操作，而 Object.defineProperty 的能力相对较为有限。</strong></li><li><strong>Proxy 是一种相对较新的特性，可能在一些较老的 JavaScript 环境中不被支持。</strong></li></ul><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-label="Permalink to &quot;最后&quot;">​</a></h2><p>好了，今天的问题就到这里啦，希望对你们有帮助，祝大家工作顺利，生活愉快！ 读者有什么更好的方式想法，欢迎留言评论，一起学习一起进步！</p>`,19),e=[o];function r(t,c,y,E,i,A){return n(),a("div",null,e)}const F=s(p,[["render",r]]);export{d as __pageData,F as default};
